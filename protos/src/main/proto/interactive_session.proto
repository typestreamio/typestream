syntax = "proto3";

package io.typestream.grpc;

option java_package = "io.typestream.grpc.interactive_session_service";

option go_package = "github.com/typestreamio/typestream/cli/pkg/interactive_session_service";

service InteractiveSessionService {
  rpc StartSession(StartSessionRequest) returns (StartSessionResponse);
  rpc RunProgram(RunProgramRequest) returns (RunProgramResponse);
  rpc GetProgramOutput(GetProgramOutputRequest) returns (stream GetProgramOutputResponse);
  rpc CompleteProgram(CompleteProgramRequest) returns (CompleteProgramResponse);
  rpc StopSession(StopSessionRequest) returns (StopSessionResponse);
}

message StartSessionRequest {
  string user_id = 1;
}

message StartSessionResponse {
  string session_id = 1;
}


message RunProgramRequest {
  string session_id = 1;
  string source = 2;
}

message RunProgramResponse {
  string id = 1;
  map<string, string> env = 2;
  string stdOut = 3;
  string stdErr = 4;
  bool hasMoreOutput = 5;
}

message GetProgramOutputRequest {
  string session_id = 1;
  string id = 2;
}

message GetProgramOutputResponse {
  string stdOut = 1;
  string stdErr = 2;
}

message CompleteProgramRequest {
  string session_id = 1;
  string source = 2;
  int32 cursor = 3;
}

message CompleteProgramResponse {
  repeated string value = 1;
}

message StopSessionRequest {
  string session_id = 1;
}

message StopSessionResponse {
  bool success = 1;
}
