{{if  ne .Namespace "default" }}
apiVersion: v1
kind: Namespace
metadata:
  name: {{.Namespace}}
spec: {}
status: {}

---
{{end -}}

apiVersion: v1
kind: ServiceAccount
metadata:
  name: typestream-service-account
  namespace: typestream

---

kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  namespace: {{.Namespace}}
  name: typestream-service-role
rules:
- apiGroups: [""]
  resources: ["configmaps", "pods", "jobs"]
  verbs: ["get", "list", "watch", "create", "update", "delete"]
- apiGroups: ["batch"]
  resources: ["jobs"]
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]


---

kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: typestream-service-role-binding
  namespace: {{.Namespace}}
subjects:
- kind: ServiceAccount
  name: typestream-service-account
roleRef:
  kind: Role
  name: typestream-service-role
  apiGroup: rbac.authorization.k8s.io

---

apiVersion: v1
kind: ConfigMap
metadata:
  name: server-config
  namespace: {{.Namespace}}
data:
  typestream.toml: |-
    [grpc]
    port=4242
    [sources.kafka.local]
    bootstrapServers="redpanda.typestream:19092"
    schemaRegistry.url="http://redpanda.typestream:18081"
    fsRefreshRate=10

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: server
  namespace: {{.Namespace}}
spec:
  replicas: 1
  selector:
    matchLabels:
      io.typestream.k8s: server
  strategy: {}
  template:
    metadata:
      labels:
        io.typestream.k8s: server
    spec:
      serviceAccountName: typestream-service-account
      containers:
        - image: {{.Image}}
          imagePullPolicy: Always
          name: server
          ports:
            - containerPort: 4242
              hostPort: 4242
              protocol: TCP
          resources:
            limits:
              cpu: "4"
              memory: "2048Mi"
            requests:
              cpu: "4"
              memory: "2048Mi"
          volumeMounts:
            - name: config-volume
              mountPath: /config
      restartPolicy: Always
      volumes:
        - name: config-volume
          configMap:
            name: server-config
status: {}
---

apiVersion: v1
kind: Service
metadata:
  name: server
  namespace: {{.Namespace}}
spec:
  ports:
    - name: "4242"
      port: 4242
      targetPort: 4242
  selector:
    io.typestream.k8s: server
status:
  loadBalancer: {}
